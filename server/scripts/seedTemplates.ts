import { storage } from "../storage";
import type { InsertProjectTemplate } from "@shared/schema";

const defaultTemplates: InsertProjectTemplate[] = [
  {
    name: "React + TypeScript Web App",
    description: "A modern full-stack web application with React, TypeScript, and Tailwind CSS",
    category: "web-app",
    techStack: ["React", "TypeScript", "Tailwind CSS", "Vite"],
    features: ["Responsive Design", "Dark Mode", "Component Library"],

    popularity: 95,
    config: {
      projectType: "frontend",
      defaultAiProvider: "anthropic",
      consciousnessEnabled: true,
      superintelligenceEnabled: false
    },
    starterFiles: [
      {
        path: "src/App.tsx",
        content: `import React from 'react';
import './App.css';

function App() {
  return (
    <div className="min-h-screen bg-gray-50 dark:bg-gray-900">
      <header className="bg-white dark:bg-gray-800 shadow">
        <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
          <div className="flex justify-between h-16">
            <div className="flex items-center">
              <h1 className="text-xl font-semibold text-gray-900 dark:text-white">
                My React App
              </h1>
            </div>
          </div>
        </div>
      </header>
      <main className="max-w-7xl mx-auto py-6 sm:px-6 lg:px-8">
        <div className="px-4 py-6 sm:px-0">
          <div className="border-4 border-dashed border-gray-200 dark:border-gray-700 rounded-lg h-96 flex items-center justify-center">
            <p className="text-gray-500 dark:text-gray-400">Start building your amazing app!</p>
          </div>
        </div>
      </main>
    </div>
  );
}

export default App;`,
        description: "Main application component"
      },
      {
        path: "src/App.css",
        content: `@import 'tailwindcss/base';
@import 'tailwindcss/components';
@import 'tailwindcss/utilities';

.App {
  text-align: center;
}`,
        description: "Main stylesheet"
      }
    ]
  },
  {
    name: "Express.js API Server",
    description: "RESTful API server with Express.js, TypeScript, and database integration",
    category: "api",
    techStack: ["Node.js", "Express.js", "TypeScript", "PostgreSQL"],
    features: ["REST API", "Authentication", "Database Integration", "Middleware"],
    popularity: 78,
    config: {
      projectType: "backend",
      defaultAiProvider: "anthropic",
      consciousnessEnabled: false,
      superintelligenceEnabled: true
    },
    starterFiles: [
      {
        path: "src/server.ts",
        content: `import express from 'express';
import cors from 'cors';
import helmet from 'helmet';

const app = express();
const PORT = process.env.PORT || 3000;

// Middleware
app.use(helmet());
app.use(cors());
app.use(express.json());

// Routes
app.get('/api/health', (req, res) => {
  res.json({ status: 'ok', timestamp: new Date().toISOString() });
});

app.get('/api/users', (req, res) => {
  res.json({ users: [] });
});

// Error handling
app.use((err: any, req: any, res: any, next: any) => {
  console.error(err.stack);
  res.status(500).json({ error: 'Something went wrong!' });
});

app.listen(PORT, () => {
  console.log(\`Server running on port \${PORT}\`);
});`,
        description: "Main server file"
      }
    ]
  },
  {
    name: "Full-Stack Next.js App",
    description: "Complete full-stack application with Next.js, API routes, and database",
    category: "fullstack",
    techStack: ["Next.js", "TypeScript", "Prisma", "PostgreSQL", "Tailwind CSS"],
    features: ["SSR", "API Routes", "Database ORM", "Authentication", "Deployment Ready"],
    popularity: 89,
    config: {
      projectType: "fullstack",
      defaultAiProvider: "anthropic",
      consciousnessEnabled: true,
      superintelligenceEnabled: true
    },
    starterFiles: [
      {
        path: "pages/index.tsx",
        content: `import Head from 'next/head';

export default function Home() {
  return (
    <div>
      <Head>
        <title>My Full-Stack App</title>
        <meta name="description" content="Generated by create-next-app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <main className="min-h-screen bg-gray-50">
        <div className="container mx-auto px-4 py-8">
          <h1 className="text-4xl font-bold text-center text-gray-900 mb-8">
            Welcome to Your Full-Stack App
          </h1>
          <div className="max-w-2xl mx-auto bg-white rounded-lg shadow-md p-6">
            <p className="text-gray-600 text-center">
              Start building your amazing full-stack application with Next.js!
            </p>
          </div>
        </div>
      </main>
    </div>
  );
}`,
        description: "Home page component"
      }
    ]
  },
  {
    name: "Python FastAPI Backend",
    description: "High-performance API with FastAPI, Pydantic, and async support",
    category: "api",
    techStack: ["Python", "FastAPI", "Pydantic", "PostgreSQL", "SQLAlchemy"],
    features: ["Async Support", "Auto Documentation", "Type Validation", "ORM Integration"],
    popularity: 67,
    config: {
      projectType: "backend",
      defaultAiProvider: "anthropic",
      consciousnessEnabled: false,
      superintelligenceEnabled: true
    },
    starterFiles: [
      {
        path: "main.py",
        content: `from fastapi import FastAPI, HTTPException
from pydantic import BaseModel
from typing import List, Optional
import uvicorn

app = FastAPI(title="My API", description="A FastAPI backend", version="1.0.0")

class User(BaseModel):
    id: Optional[int] = None
    name: str
    email: str

# In-memory storage (replace with database)
users_db = []

@app.get("/")
async def root():
    return {"message": "Welcome to FastAPI!"}

@app.get("/users", response_model=List[User])
async def get_users():
    return users_db

@app.post("/users", response_model=User)
async def create_user(user: User):
    user.id = len(users_db) + 1
    users_db.append(user)
    return user

@app.get("/users/{user_id}", response_model=User)
async def get_user(user_id: int):
    for user in users_db:
        if user.id == user_id:
            return user
    raise HTTPException(status_code=404, detail="User not found")

if __name__ == "__main__":
    uvicorn.run(app, host="0.0.0.0", port=8000)`,
        description: "Main FastAPI application"
      }
    ]
  },
  {
    name: "Machine Learning Model",
    description: "ML project template with data processing, training, and inference",
    category: "ml-model",
    techStack: ["Python", "Scikit-learn", "Pandas", "NumPy", "Jupyter"],
    features: ["Data Processing", "Model Training", "Visualization", "Export/Import"],
    popularity: 54,
    config: {
      projectType: "ml",
      defaultAiProvider: "openai",
      consciousnessEnabled: true,
      superintelligenceEnabled: true
    },
    starterFiles: [
      {
        path: "model.py",
        content: `import pandas as pd
import numpy as np
from sklearn.model_selection import train_test_split
from sklearn.ensemble import RandomForestClassifier
from sklearn.metrics import accuracy_score, classification_report
import joblib

class MLModel:
    def __init__(self):
        self.model = RandomForestClassifier(n_estimators=100, random_state=42)
        self.is_trained = False
    
    def load_data(self, file_path: str):
        """Load data from CSV file"""
        self.data = pd.read_csv(file_path)
        return self.data
    
    def prepare_data(self, target_column: str):
        """Prepare features and target"""
        self.X = self.data.drop(columns=[target_column])
        self.y = self.data[target_column]
        return self.X, self.y
    
    def train(self, test_size=0.2):
        """Train the model"""
        X_train, X_test, y_train, y_test = train_test_split(
            self.X, self.y, test_size=test_size, random_state=42
        )
        
        self.model.fit(X_train, y_train)
        self.is_trained = True
        
        # Evaluate
        y_pred = self.model.predict(X_test)
        accuracy = accuracy_score(y_test, y_pred)
        
        print(f"Model trained with accuracy: {accuracy:.4f}")
        print(classification_report(y_test, y_pred))
        
        return accuracy
    
    def predict(self, X):
        """Make predictions"""
        if not self.is_trained:
            raise ValueError("Model must be trained before making predictions")
        return self.model.predict(X)
    
    def save(self, file_path: str):
        """Save the trained model"""
        joblib.dump(self.model, file_path)
    
    def load(self, file_path: str):
        """Load a trained model"""
        self.model = joblib.load(file_path)
        self.is_trained = True

# Example usage
if __name__ == "__main__":
    model = MLModel()
    # model.load_data('data.csv')
    # model.prepare_data('target')
    # model.train()
    print("ML Model template ready!")`,
        description: "Main ML model class"
      }
    ]
  }
];

export async function seedTemplates() {
  console.log("Seeding project templates...");
  
  try {
    // Check if templates already exist
    const existingTemplates = await storage.getProjectTemplates();
    if (existingTemplates.length > 0) {
      console.log("Templates already exist, skipping seed.");
      return;
    }
    
    // Create templates
    for (const template of defaultTemplates) {
      await storage.createProjectTemplate(template);
      console.log(`Created template: ${template.name}`);
    }
    
    console.log(`Successfully seeded ${defaultTemplates.length} templates.`);
  } catch (error) {
    console.error("Error seeding templates:", error);
    throw error;
  }
}

// Run if called directly
if (import.meta.url === `file://${process.argv[1]}`) {
  seedTemplates().catch(console.error);
}